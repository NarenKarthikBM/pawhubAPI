name: CI/CD - GeoDjango on Vultr

on:
  push:
    branches: ["main"]

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest

    services:
      # PostGIS for tests if you need DB-dependent tests
      postgres:
        image: postgis/postgis:15-3.4
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache pipenv
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install pipenv & deps
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install
          pipenv sync --dev

      - name: Env for tests
        run: |
          echo "DATABASE_URL=postgis://testuser:testpass@localhost:5432/testdb" >> $GITHUB_ENV
          echo "DJANGO_SECRET_KEY=test" >> $GITHUB_ENV
          echo "DEBUG=1" >> $GITHUB_ENV
          echo "ALLOWED_HOSTS=*" >> $GITHUB_ENV

      - name: Check missing migrations (fail if models changed)
        run: |
          pipenv run python manage.py makemigrations --check --dry-run

      - name: Run Django tests
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          pipenv run python manage.py test --noinput

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GHCR
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ secrets.GHCR_USERNAME }}/pawhubapi:latest .

      - name: Push Docker image
        run: docker push ghcr.io/${{ secrets.GHCR_USERNAME }}/pawhubapi:latest

      - name: Deploy to Vultr (pull/up + migrate + collectstatic)
        uses: appleboy/ssh-action@v1.0.3
        if: success()
        with:
          host: ${{ secrets.VULTR_HOST }}
          username: ${{ secrets.VULTR_USER }}
          key: ${{ secrets.VULTR_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd /pawhubAPI/pawhubAPI

            # Update compose files in case they changed (pull latest repo)
            if [ -d .git ]; then
              git fetch --all
              git reset --hard origin/main
            fi

            # Use the pushed image from Docker Hub
            docker compose pull
            docker compose up -d --remove-orphans

            # Run migrations and collectstatic against the new image
            docker compose exec -T web python manage.py migrate --noinput
            docker compose exec -T web python manage.py collectstatic --noinput

            # Optional: sanity check
            docker compose ps
